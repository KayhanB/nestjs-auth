type Query {
    listHomes(filter: ModelHomeFilterInput, limit: Int): [Home]
    getHome(id: ID!): Home
}

type Mutation {
    createHome(createHomeInput: CreateHomeInput): Home
    deleteHome(deleteHomeInput: DeleteHomeInput): Home
    updateHome(updateHomeInput: UpdateHomeInput): Home
}

type Subscription {
    homeCreated: Home
}

type Home {
    id: ID!
    owner: User
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input CreateHomeInput {
    owner: String
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input UpdateHomeInput {
    id: ID!
    owner: String
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input DeleteHomeInput {
    id: ID!
}

input ModelIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
}

input ModelBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input ModelIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    contains: Int
    notContains: Int
    between: [Int]
}

input ModelFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    contains: Float
    notContains: Float
    between: [Float]
}

input ModelStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

input ModelHomeFilterInput {
    id: ModelIDFilterInput
    price: ModelFloatFilterInput
    price_adjustment: ModelFloatFilterInput
    descr: ModelStringFilterInput
    json: ModelStringFilterInput
    address_1: ModelStringFilterInput
    address_2: ModelStringFilterInput
    city: ModelStringFilterInput
    state: ModelStringFilterInput
    zip: ModelStringFilterInput
    country: ModelStringFilterInput
    beds: ModelIntFilterInput
    baths: ModelIntFilterInput
    lot_size: ModelFloatFilterInput
    sqft: ModelIntFilterInput
    lat: ModelFloatFilterInput
    lng: ModelFloatFilterInput
    pool: ModelBooleanFilterInput
    fav_count: ModelIntFilterInput
    showing_count: ModelIntFilterInput
    buyers_agent: ModelBooleanFilterInput
    buyers_agent_amt: ModelFloatFilterInput
    buyers_agent_type: ModelIntFilterInput
}
