type Query {
    listHomes(filter: ModelHomeFilterInput, limit: Int): [Home]
    getHome(id: ID!): Home
    getAVMDetail(getAVMDetailInput: GetAVMDetailInput): AVM
}

type Mutation {
    createHome(createHomeInput: CreateHomeInput): Home
    deleteHome(deleteHomeInput: DeleteHomeInput): Home
    updateHome(updateHomeInput: UpdateHomeInput): Home
}

type Subscription {
    homeCreated: Home
    homeUpdated: Home
    homeDeleted: Home
}

type AVM {
    property: Property
    schools: [School]
}

#############################################
#Properties
type Property {
    address: PropertyAddress
    area: PropertyArea
    avm: PropertyAVMDetails
    building: PropertyBuilding
    identifier: PropertyIdentifier
    location: PropertyLocation
    lot: PropertyLot
    summary: PropertySummary
    utilities: PropertyUtilities
    vintage: PropertyVintage
}

#AVMDetails
type PropertyAVMDetails {
    amount: PropertyAVMAmount
    calculations: PropertyAVMCalculations
    condition: PropertyAVMCondition
    eventDate: String
    AVMChange: PropertyAVMChange
}

type PropertyAVMAmount {
    scr: Int
    value: Int
    high: Int
    low: Int
    valueRange: Int
}

type PropertyAVMCalculations {
    perSizeUnit: Float
    ratioTaxAmt: Float
    ratioTaxValue: Float
    monthlyChgPct: Float
    monthlyChgValue: Float
    rangePctOfValue: Float
}

type PropertyAVMCondition {
    avmpoorlow: Int
    avmpoorhigh: Int
    avmpoorscore: Float
    avmgoodlow: Int
    avmgoodhigh: Int
    avmgoodscore: Float
    avmexcellentlow: Int
    avmexcellenthigh: Int
    avmexcellentscore: Float
}

type PropertyAVMChange {
    avmlastmonthvalue: Int
    avmamountchange: Int
    avmpercentchange: Int
}

# Building Schema
type PropertyBuilding {
    construction: PropertyBuildingConstruction
    interior: PropertyBuildingInterior
    parking: PropertyBuildingParking
    rooms: PropertyBuildingRooms
    size: PropertyBuildingSize
    summary: PropertyBuildingSummary
}

type PropertyBuildingConstruction{
    foundationtype: String
    frameType: String
    roofcover: String
    wallType: String
}
type PropertyBuildingInterior{
    bsmtsize: Float
    fplccount: Int
}
type PropertyBuildingParking{
    garagetype: String
    prkgSize: Int
    prkgSpaces: String
    prkgType: String
}
type PropertyBuildingRooms{
    bathfixtures: Int
    baths1qtr: Int
    baths3qtr: Int
    bathscalc: Int
    bathsfull: Int
    bathshalf: Int
    bathstotal: Int
    beds: Int
    roomsTotal: Int
}
type PropertyBuildingSize{
    bldgsize: Int
    grosssize: Int
    grosssizeadjusted: Int
    groundfloorsize: Int
    livingsize: Int
    sizeInd: String
    universalsize: Int
}
type PropertyBuildingSummary{
    bldgsNum: Int
    bldgType: String
    imprType: String
    levels: Int
    mobileHomeInd: String
    quality: String
    storyDesc: String
    unitsCount: String
    yearbuilteffective: Int
}

#Rest Property types
type PropertySummary{
    absenteeInd: String
    propclass: String
    propsubtype: String
    proptype: String
    yearbuilt: Int
    propLandUse: String
    propIndicator: String
    legal1: String
}
type PropertyLot{
    depth: Int
    frontage: Int
    lotnum: String
    lotsize1: Float
    lotsize2: Float
    pooltype: String
}
type PropertyLocation{
    accuracy: String
    elevation: Float
    latitude: String
    longitude: String
    distance: Float
    geoid: String
}
type PropertyIdentifier {
    obPropId: String
    fips: String
    apn: String
    apnOrig: String
    attomId: String
}
type PropertyVintage {
    lastModified: String
    pubDate: String
}
type PropertyUtilities {
    coolingtype: String
    heatingtype: String
    wallType: String
}

type PropertyArea {
    blockNum: String
    countyuse1: String
    countrysecsubd: String
    munname: String
    muncode: String
    subdname: String
    subdtractnum: String
    taxcodearea: String
}

type PropertyAddress {
    country: String
    countrySubd: String
    line1: String
    line2: String
    locality: String
    matchCode: String
    oneLine: String
    postal1: String
    postal2: String
    postal3: String
}

#####################################
#School
type School {
    Identifier: SchoolIdentifier
    SchoolProfileAndDistrictInfo: SchoolProfileAndDistrictInfo
    Vintage: SchoolVintage
}

type SchoolIdentifier {
    OBInstID: String
}

type SchoolVintage {
    onboardDate: String
}

type SchoolProfileAndDistrictInfo {
    DistrictContact: SchoolDistrictContact
    DistrictSummary: SchoolDistrictSummary
    MeasurementResults: [SchoolMeasurementResults]
    MeasurementType: [SchoolMeasurementType]
    Programs: [String]
    SchoolEnrollment: SchoolEnrollment
    SchoolDetail: SchoolDetail
    SchoolContact: SchoolContact
    SchoolLocation: SchoolLocation
    SchoolSummary: SchoolSummary
    SchoolTech: SchoolTech
}

type SchoolLocation {
    COUNTY3: String
    COUNTYNAME: String
    COUNTY: String
    geocodinglatitude: Float
    geocodinglongitude: Float
    locationaddress: String
    locationcity: String
    fipsState: String
    stateabbrev: String
    zip54: String
    ZIP: String
    Obdistrictnumber: String
    districttype: String
    districtname: String
    geoid: String
}

type SchoolSummary {
    Filetypetext: String
    buildingtypetext: String
    institutionname: String
    startDate: String
    endDate: String
    gradelevel1lotext: String
    gradelevel1hitext: String
    gradelevel1locode: String
    gradelevel1hicode: String
    gradespancodebldgtext: String
    Preschool: String
    Elementary: String
    Middle: String
    High: String
    GStestrating: Int
}

type SchoolTech {
    Technologymeasuretype: String
    Computergrandtotal: Int
    OStype: String
}

type SchoolContact {
    phone: String
    Prefixliteral: String
    Firstname: String
    Lastname: String
    Gender: String
    Englishtitle: String
    Websiteurl: String
}

type SchoolDetail {
    educationClimateIndex: String
    advancedPlacement: String
    beforeandafterschoolprgms: String
    blueribbonschool: String
    charterschools: String
    giftedandtalented: String
    internationbaccalaureate: String
    magnetschool: String
    sitebased: String
    collegebound: Int
    voctech: String
    adulteducationclasses: String
    adultother: String
    specialeducation: String
    alterantiveprogram: String
    yearroundclasses: String
    ESL: String
    Povertylevel: String
    Instructionalexpensepupil: Int
    AYPschool: String
}

type SchoolEnrollment {
    Enrollmentbygradeprek: Int
    Enrollmentbygradekgtn: Int
    Enrollmentbygradeone: Int
    Enrollmentbygradetwo: Int
    Enrollmentbygradethree: Int
    Enrollmentbygradefour: Int
    Enrollmentbygradefive: Int
    Enrollmentbygradesix: Int
    Enrollmentbygradeseven: Int
    Enrollmentbygradeeight: Int
    Enrollmentbygradenine: Int
    Enrollmentbygradeten: Int
    Enrollmentbygradeeleven: Int
    Enrollmentbygradetwelve: Int
    Enrollmentshift: String
    Studentsnumberof: Int
    Studentsgrade: Int
    Studentteacher: String
}

type SchoolMeasurementType {
    measureTypeId: String
    measuretype: String
    measureunits: String
    measurename: String
    measureabbrev: String
    resulttype: String
    scaledefinition: String
    rankmax: String
    year: String
    purposedescription: String
}

type SchoolMeasurementResults {
    measureTypeId: String
    year: String
    subjectName: String
    grade: String
    measure: String
    insttype: String
}

type SchoolDistrictContact {
    Prefixliteral: String
    Firstname: String
    Lastname: String
    Gender: String
    Englishtitle: String
    Websiteurl: String
}

type SchoolDistrictSummary {
    Obdistrictnumber: String
    districttype: String
    districtname: String
    COUNTY3: String
    COUNTYNAME: String
    COUNTY: String
    latitude: Float
    longitude: Float
    locationaddress: String
    locationcity: String
    fipsState: String
    stateabbrev: String
    zip54: String
    ZIP: String
    phone: String
    startDate: String
    endDate: String
    GStestrating: Int
}

###################################################

type Home {
    id: ID!
    owner: User
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input CreateHomeInput {
    owner: String
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input UpdateHomeInput {
    id: ID!
    owner: String
    price: Float
    price_adjustment: Float
    descr: String
    json: String
    address_1: String
    address_2: String
    city: String
    state: String
    zip: String
    country: String
    beds: Int
    baths: Int
    lot_size: Float
    sqft: Int
    lat: Float
    lng: Float
    pool: Boolean
    fav_count: Int
    showing_count: Int
    buyers_agent: Boolean
    buyers_agent_amt: Float
    buyers_agent_type: Int
}

input DeleteHomeInput {
    id: ID!
}

input ModelIDFilterInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
}

input ModelBooleanFilterInput {
    ne: Boolean
    eq: Boolean
}

input ModelIntFilterInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    contains: Int
    notContains: Int
    between: [Int]
}

input ModelFloatFilterInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    contains: Float
    notContains: Float
    between: [Float]
}

input ModelStringFilterInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
}

input ModelHomeFilterInput {
    id: ModelIDFilterInput
    price: ModelFloatFilterInput
    price_adjustment: ModelFloatFilterInput
    descr: ModelStringFilterInput
    json: ModelStringFilterInput
    address_1: ModelStringFilterInput
    address_2: ModelStringFilterInput
    city: ModelStringFilterInput
    state: ModelStringFilterInput
    zip: ModelStringFilterInput
    country: ModelStringFilterInput
    beds: ModelIntFilterInput
    baths: ModelIntFilterInput
    lot_size: ModelFloatFilterInput
    sqft: ModelIntFilterInput
    lat: ModelFloatFilterInput
    lng: ModelFloatFilterInput
    pool: ModelBooleanFilterInput
    fav_count: ModelIntFilterInput
    showing_count: ModelIntFilterInput
    buyers_agent: ModelBooleanFilterInput
    buyers_agent_amt: ModelFloatFilterInput
    buyers_agent_type: ModelIntFilterInput
}

input GetAVMDetailInput {
    address_1: String
    address_2: String
}
