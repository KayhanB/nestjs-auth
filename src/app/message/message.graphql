type Query {
    allConversations: [UserConversation]
    allMessages(conversationId: ID!, after: Int, limit: Int): [Message]
}

type Mutation {
    createConversation(conversationInput: CreateConversationInput): UserConversation
    createMessage(conversationId: ID!, content: String, type: String): Message
}

type Subscription {
    newMessage: Message
    newUserConversation: UserConversation
}

type Conversation {
    id: ID!
    home: Home
    type: String
    messages: [Message]
    createdAt: String
}

input CreateConversationInput {
    homeId: ID!,
    type: String!,
    recipientId: String!
}

type UserConversation {
    conversation: Conversation
    user: User
}

type Message {
    id: ID!
    author: User
    content: String!
    conversationId: ID!
    type: String
    isSent: Boolean
    isRead: Boolean
    createdAt: String
}
